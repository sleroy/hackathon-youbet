@startuml Functional architecture
!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v15.0/dist
!include AWSPuml/AWSCommon.puml
!include AWSPuml/BusinessApplications/all.puml
!include AWSPuml/Storage/SimpleStorageService.puml
!include AWSPuml/Database/Aurora.puml
!include AWSPuml/Database/Database.puml
!include AWSPuml/ApplicationIntegration/SimpleQueueService.puml

' 
' Simplified
!include AWSPuml/AWSSimplified.puml

skinparam rectangle {
    roundCorner<<Concept>> 25
}
<style>
actor {
  BackGroundColor #f80c12
  LineThickness 1
  LineColor black
}
agent {
  BackGroundColor #22ccaa
  LineThickness 1
  LineColor black
}
artifact {
  BackGroundColor #ee1100
  LineThickness 1
  LineColor black
}
boundary {
  BackGroundColor #ee1100
  LineThickness 1
  LineColor black
}
card {
  BackGroundColor #ff3311
  LineThickness 1
  LineColor black
}
circle {
  BackGroundColor #ff3311
  LineThickness 1
  LineColor black
}
cloud {
  BackGroundColor #ff4422
  LineThickness 1
  LineColor black
}
collections {
  BackGroundColor #ff4422
  LineThickness 1
  LineColor black
}
component {
  BackGroundColor #ff6644
  LineThickness 1
  LineColor black
}
control {
  BackGroundColor #ff6644
  LineThickness 1
  LineColor black
}
database {
  BackGroundColor #ff9933
  LineThickness 1
  LineColor black
}
entity {
  BackGroundColor #feae2d
  LineThickness 1
  LineColor black
}
file {
  BackGroundColor #feae2d
  LineThickness 1
  LineColor black
}
folder {
  BackGroundColor #ccbb33
  LineThickness 1
  LineColor black
}
frame {
  BackGroundColor #d0c310
  LineThickness 1
  LineColor black
}
hexagon {
  BackGroundColor #aacc22
  LineThickness 1
  LineColor black
}
interface {
  BackGroundColor #69d025
  LineThickness 1
  LineColor black
}
label {
  BackGroundColor black
  LineThickness 1
  LineColor black
}
node {
  BackGroundColor #22ccaa
  LineThickness 1
  LineColor black
}
package {
  BackGroundColor #LightGray
  LineThickness 1
  LineColor black
}
person {
  BackGroundColor #11aabb
  LineThickness 1
  LineColor black
}
queue {
  BackGroundColor lightblue
  LineThickness 1
  LineColor black
}
rectangle {
  BackGroundColor #4444dd
  LineThickness 1
  LineColor black
}
stack {
  BackGroundColor #3311bb
  LineThickness 1
  LineColor black
}
storage {
  BackGroundColor #3b0cbd
  LineThickness 1
  LineColor black
}
usecase {
  BackGroundColor #442299
  LineThickness 1
  LineColor black
}
</style>
file ExternalProviderMatchRegisteredEvent  #yellow;line:gray;line.bold;text:blue
file ExternalProviderMatchUpdatedEvent #yellow;line:gray;line.bold;text:blue

package ExternalProvider {

  collections ApiGateway

  queue ExternalProviderMatchRegistrationQueue 
  queue ExternalProviderMatchUpdateQueue 

}


package DataPreparation {

  queue DataPipelineMatchRegistrationSanitizationQueue 
  queue DataPipelineAggregateLeagueQueue 
  queue DataPipelineAggregateTeamQueue 
  queue DataPipelineMatchEventDispatcherQueue  

  agent DataPipelineExternalProviderMatchRegisteredAgent
  agent DataPipelineExternalProviderMatchUpdatedAgent

  agent DataPipelineSanitizationAgent
  agent DataPipelineAggregateLeagueAgent
  agent DataPipelineAggregateTeamAgent
  agent DataPipelineMatchEventDispatcherAgent

}

package MatchSystem {
  queue MatchSystemMatchRegistrationQueue 
  queue MatchSystemMatchUpdateQueue 

  agent MatchSystemMatchRegistrationAgent
  agent MatchSystemMatchUpdateAgent

  Aurora(matchSystemDB, "Match System and Odds", "")
}

package MatchPrediction {
  agent MatchPredictionMatchDataStorageAgent
  queue MatchPredictionMatchDataStorageQueue 

}


ExternalProviderMatchRegisteredEvent -down-> ApiGateway 
ExternalProviderMatchUpdatedEvent -down-> ApiGateway 

ApiGateway -down-> ExternalProviderMatchRegistrationQueue
ApiGateway -down-> ExternalProviderMatchUpdateQueue

ExternalProviderMatchRegistrationQueue -down-> DataPipelineExternalProviderMatchRegisteredAgent
ExternalProviderMatchUpdateQueue -down-> DataPipelineExternalProviderMatchUpdatedAgent

DataPipelineExternalProviderMatchUpdatedAgent -up-> DataPipelineAggregateLeagueQueue


DataPipelineExternalProviderMatchRegisteredAgent -> DataPipelineMatchRegistrationSanitizationQueue

DataPipelineMatchRegistrationSanitizationQueue -> DataPipelineSanitizationAgent

DataPipelineSanitizationAgent -> DataPipelineAggregateLeagueQueue
DataPipelineAggregateLeagueQueue -> DataPipelineAggregateLeagueAgent

DataPipelineAggregateLeagueAgent -> DataPipelineAggregateTeamQueue
DataPipelineAggregateLeagueAgent -up-> matchSystemDB


DataPipelineAggregateTeamQueue -> DataPipelineAggregateTeamAgent 

DataPipelineAggregateTeamAgent -> DataPipelineMatchEventDispatcherQueue 
DataPipelineAggregateTeamAgent -up-> matchSystemDB

DataPipelineMatchEventDispatcherQueue -> DataPipelineMatchEventDispatcherAgent

DataPipelineMatchEventDispatcherAgent -up-> MatchSystemMatchRegistrationQueue 
DataPipelineMatchEventDispatcherAgent -down-> MatchSystemMatchUpdateQueue
DataPipelineMatchEventDispatcherAgent --> MatchPredictionMatchDataStorageQueue


' MATCH SYSTEM
MatchSystemMatchRegistrationAgent -> MatchSystemMatchRegistrationQueue
MatchSystemMatchUpdateAgent -> MatchSystemMatchUpdateQueue
MatchSystemMatchRegistrationAgent -> matchSystemDB
MatchSystemMatchUpdateAgent -> matchSystemDB


' MATCH PREDICTION
MatchPredictionMatchDataStorageAgent -> MatchPredictionMatchDataStorageQueue


'
'actor actor
'actor/ "actor/"
/'
agent agent
artifact artifact
boundary boundary
card card
circle circle
cloud cloud
collections collections
component component
control control
database database
entity entity
file file
folder folder
frame frame
hexagon hexagon
interface interface
label label
node node
package package
person person
queue queue
rectangle rectangle
stack stack
storage storage
usecase usecase
usecase/ "usecase/"
'/
@enduml
